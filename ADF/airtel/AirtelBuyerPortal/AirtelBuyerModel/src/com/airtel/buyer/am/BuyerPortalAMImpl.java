package com.airtel.buyer.am;

import com.airtel.buyer.am.common.BuyerPortalAM;
import com.airtel.buyer.pojo.SupplierSitesTblRec;
import com.airtel.buyer.pojo.SupplierTblRec;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 17 20:17:05 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BuyerPortalAMImpl extends ApplicationModuleImpl implements BuyerPortalAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BuyerPortalAMImpl() {
    }

    /**
     * Container's getter for BTVL_WKF_PARTNER_STATUS_TBL_VO1.
     * @return BTVL_WKF_PARTNER_STATUS_TBL_VO1
     */
    public ViewObjectImpl getBTVL_WKF_PARTNER_STATUS_TBL_VO1() {
        return (ViewObjectImpl) findViewObject("BTVL_WKF_PARTNER_STATUS_TBL_VO1");
    }

    /**
     * Container's getter for BTVL_PO_LOOKUP_CODES_MV_RVO1.
     * @return BTVL_PO_LOOKUP_CODES_MV_RVO1
     */
    public ViewObjectImpl getBTVL_PO_LOOKUP_CODES_MV_RVO1() {
        return (ViewObjectImpl) findViewObject("BTVL_PO_LOOKUP_CODES_MV_RVO1");
    }

    public Boolean updateWKFStatus(Long wkfId, Integer status, String comment) {
        Boolean isSuccess = Boolean.TRUE;
        try {
            ViewObjectImpl btvlWkfPartnerStatusVO = getBTVL_WKF_PARTNER_STATUS_TBL_VO1();
            ViewCriteria vendorRequestStatusUpdateVC =
                btvlWkfPartnerStatusVO.getViewCriteria("VendorRequestStatusUpdateVC");
            btvlWkfPartnerStatusVO.setNamedWhereClauseParam("bndWkfId", wkfId);
            btvlWkfPartnerStatusVO.applyViewCriteria(null);
            btvlWkfPartnerStatusVO.applyViewCriteria(vendorRequestStatusUpdateVC);
            btvlWkfPartnerStatusVO.executeQuery();

            if (btvlWkfPartnerStatusVO.first() != null) {
                btvlWkfPartnerStatusVO.first().setAttribute("Status", status);
                btvlWkfPartnerStatusVO.first().setAttribute("WfkComment", comment);
                getDBTransaction().commit();
            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
            isSuccess = Boolean.FALSE;
        }
        return isSuccess;
    }

    /**
     * Method to call Database function
     * @param stmt
     * @param bindVars
     * @return
     */
    protected String callStoredProcOut(String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            //Creating sql statement
            st = this.getDBTransaction().createCallableStatement("begin " + stmt + ";end;", 0);
            // Set the bind values of the IN parameters (Employee Id is Input parameter here)
            st.setObject(1, bindVars[0]);

            //Register out parameters and their types (In this case procedure has 2 out parameters)


            st.registerOutParameter(2, Types.VARCHAR);
            st.registerOutParameter(3, Types.VARCHAR);

            // Execute the statement
            st.executeUpdate();

            // Print Return Values of out parameters
            System.out.println("Status" + st.getString(2) + "Message " + st.getString(3));
            return st.getString(2) + "  :: " + st.getString(3);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    public String callStoredProcedure(Long partnerVendorId) {
        //Here we will pass only input parameter but
        //write procedure signature for all parameters (IN and OUT)
        return callStoredProcOut("BTVL_CALL_EBS_VEND_CREATE_PROC(?,?,?)", new Object[] { partnerVendorId });
    }

    /**
     * Container's getter for BTVL_M_SUPPLIERS_TBL_VO1.
     * @return BTVL_M_SUPPLIERS_TBL_VO1
     */
    public ViewObjectImpl getBTVL_M_SUPPLIERS_TBL_VO1() {
        return (ViewObjectImpl) findViewObject("BTVL_M_SUPPLIERS_TBL_VO1");
    }


    /**
     * Container's getter for BTVL_M_SUPPLIER_CONTACTS_TBL_VO1.
     * @return BTVL_M_SUPPLIER_CONTACTS_TBL_VO1
     */
    public ViewObjectImpl getBTVL_M_SUPPLIER_CONTACTS_TBL_VO1() {
        return (ViewObjectImpl) findViewObject("BTVL_M_SUPPLIER_CONTACTS_TBL_VO1");
    }

    /**
     * Container's getter for BTVL_M_SUPPLIERS_SITES_TBL_VO1.
     * @return BTVL_M_SUPPLIERS_SITES_TBL_VO1
     */
    public ViewObjectImpl getBTVL_M_SUPPLIERS_SITES_TBL_VO1() {
        return (ViewObjectImpl) findViewObject("BTVL_M_SUPPLIERS_SITES_TBL_VO1");
    }
    
    public Boolean createSupplierRecords(SupplierTblRec supplierTblRec, SupplierSitesTblRec supplierSitesTblRec) {
        Boolean isCreated = Boolean.FALSE;
        System.out.println("Inside createSupplierRecords");
        try {
            ViewObjectImpl supplierVO = getBTVL_M_SUPPLIERS_TBL_VO1();
            //Check if record exists
            System.out.println("Check if supplier record exists");
            ViewCriteria getSupplierRecordbyPartnerVendorIdVC =
                supplierVO.getViewCriteria("GetSupplierRecordbyPartnerVendorId");
            supplierVO.setNamedWhereClauseParam("bndPartnerVendorId", supplierTblRec.getPartnerVendorId());
            supplierVO.applyViewCriteria(null);
            supplierVO.applyViewCriteria(getSupplierRecordbyPartnerVendorIdVC);
            supplierVO.executeQuery();
            System.out.println("record check complete");
            if (supplierVO.first() != null) {
                //update supplier record
                System.out.println("Supplier exists already");
                Row supplierTblRecRow = supplierVO.first();
                System.out.println("----"+supplierTblRec.getVendorType()+"----");
                supplierTblRecRow.setAttribute("VendorType", supplierTblRec.getVendorType());
                supplierTblRecRow.setAttribute("VendorTypeLookupCode", supplierTblRec.getVendorType());
                System.out.println("Committing record");
                getDBTransaction().commit();
                
            } else {
                //create row for SupplierTblRec
                System.out.println("create row for SupplierTblRec");
                Row supplierTblRecRow = supplierVO.createRow();
                supplierTblRecRow.setAttribute("PartnerVendorId", supplierTblRec.getPartnerVendorId());
                supplierTblRecRow.setAttribute("VendorName", supplierTblRec.getVendorName());
                supplierTblRecRow.setAttribute("VendorType", supplierTblRec.getVendorType());
                supplierTblRecRow.setAttribute("VendorTypeLookupCode", supplierTblRec.getVendorType());
                supplierTblRecRow.setAttribute("CompanyUrl", supplierTblRec.getCompanyUrl());
                supplierTblRecRow.setAttribute("OrganizationType", supplierTblRec.getOrganizationType());
                supplierTblRecRow.setAttribute("Status", supplierTblRec.getStatus());
                supplierTblRecRow.setAttribute("Message", supplierTblRec.getMessage());
                supplierVO.insertRow(supplierTblRecRow);
                System.out.println("Row Inserted-----in Supplier TBL");
                ViewObjectImpl supplierSitesVO = getBTVL_M_SUPPLIERS_SITES_TBL_VO1();
                //create row for SupplierSitesTblRec
                Row supplierSitesTblRecRow = supplierSitesVO.createRow();
                supplierSitesTblRecRow.setAttribute("CustomVendorSiteId", supplierSitesTblRec.getCustomVendorSiteId());
                supplierSitesTblRecRow.setAttribute("PartnerVendorId", supplierSitesTblRec.getPartnerVendorId());
                supplierSitesTblRecRow.setAttribute("AddressLine1", supplierSitesTblRec.getAddressLine1());
                supplierSitesTblRecRow.setAttribute("City", supplierSitesTblRec.getCity());
                supplierSitesTblRecRow.setAttribute("State", supplierSitesTblRec.getState());
                supplierSitesTblRecRow.setAttribute("Zip", supplierSitesTblRec.getZip());
                supplierSitesTblRecRow.setAttribute("Country", supplierSitesTblRec.getCountry());
                supplierSitesTblRecRow.setAttribute("SitePan", supplierSitesTblRec.getSitePan());
                supplierSitesTblRecRow.setAttribute("Phone", supplierSitesTblRec.getPhone());
                supplierSitesTblRecRow.setAttribute("EmailAddress", supplierSitesTblRec.getEmailAddress());
                supplierSitesVO.insertRow(supplierSitesTblRecRow);
                System.out.println("Row Inserted-----in Supplier Sites TBL");
                //
                //        ViewObjectImpl supplierContactsVO = getBTVL_M_SUPPLIER_CONTACTS_TBL_VO1();
                //        Row supplierContactTblRecRow = supplierContactsVO.createRow();
                //        supplierContactTblRecRow.setAttribute("SitePan", supplierContactTblRec.getSitePan());

                System.out.println("Committing transaction");
                getDBTransaction().commit();
            }
            
            isCreated = Boolean.TRUE;


        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return isCreated;
    }

    /**
     * Container's getter for BTVL_PARTNER_USER_TBL_RVO1.
     * @return BTVL_PARTNER_USER_TBL_RVO1
     */
    public ViewObjectImpl getBTVL_PARTNER_USER_TBL_RVO1() {
        return (ViewObjectImpl) findViewObject("BTVL_PARTNER_USER_TBL_RVO1");
    }
    
    
    // Mthod to execute delete SQL statement
      public boolean executeQueryDelete(String sql) {
          boolean onSuccess = false;
          PreparedStatement ps = null;

          try {
              ps = getDBTransaction().createPreparedStatement(sql, 0);
              ps.executeUpdate();
              getDBTransaction().commit();
              onSuccess = true;
          } catch (SQLException sqlE) {
              onSuccess = false;
              sqlE.printStackTrace();
          }


          return onSuccess;
      }
      
      
      
      
      public Boolean enableReApplication(String _partnerVendorId){
          
          Boolean isDeleteSuccess= false;
          
          System.out.println("--------------Inside enableReApplicatgion unde AMImpl --------------");
          String deleteBtvlSupplierUserTxn = "delete from BTVL_PARTNER_USER_TBL_TXN txn where txn.PARTNER_VENDOR_ID='"+_partnerVendorId+"'";
          
          String deleteBtvlSupplierUser="delete from BTVL_PARTNER_USER_TBL ut where ut.PARTNER_VENDOR_ID='"+_partnerVendorId+"'";
          String deleteSupplierWkf = "delete from BTVL_WKF_PARTNER_STATUS_TBL st where st.PARTNER_VENDOR_ID='"+_partnerVendorId+"'";
          String deleteBtvlMSupplierTbl = "delete from BTVL_M_SUPPLIERS_TBL sup where sup.PARTNER_VENDOR_ID='"+_partnerVendorId+"'";
          String deleteBtvlMSupplierSitesTbl = "delete from BTVL_M_SUPPLIERS_SITES_TBL site where site.PARTNER_VENDOR_ID='"+_partnerVendorId+"'";
          
            isDeleteSuccess = executeQueryDelete(deleteBtvlSupplierUserTxn);
          System.out.println("--------------delete from BTVL_PARTNER_USER_TBL_TXN executed  -------------- :::"+_partnerVendorId);
          
          isDeleteSuccess = executeQueryDelete(deleteBtvlSupplierUser);
          System.out.println("--------------delete from BTVL_PARTNER_USER_TBL executed  -------------- :::"+_partnerVendorId);
          isDeleteSuccess = executeQueryDelete(deleteSupplierWkf);
          System.out.println("--------------delete from BTVL_WKF_PARTNER_STATUS_TBL executed  -------------- :::"+_partnerVendorId);
         
          isDeleteSuccess = executeQueryDelete(deleteBtvlMSupplierSitesTbl);
          System.out.println("--------------delete from BTVL_M_SUPPLIERS_SITES_TBL executed  -------------- :::"+_partnerVendorId);
          isDeleteSuccess = executeQueryDelete(deleteBtvlMSupplierTbl);
          System.out.println("--------------delete from BTVL_M_SUPPLIERS_TBL executed  -------------- :::"+_partnerVendorId);
          
          
         
          
          System.out.println("--------------Execution ended-------------- :::"+_partnerVendorId);
          
          return isDeleteSuccess;
      }

    /**
     * Container's getter for BTVL_WKF_PARTNER_SITE_TBL_VO1.
     * @return BTVL_WKF_PARTNER_SITE_TBL_VO1
     */
    public ViewObjectImpl getBTVL_WKF_PARTNER_SITE_TBL_VO1() {
        return (ViewObjectImpl) findViewObject("BTVL_WKF_PARTNER_SITE_TBL_VO1");
    }

    /**
     * Container's getter for BTVL_WKF_PARTNER_BANK_ACC_TBL_VO1.
     * @return BTVL_WKF_PARTNER_BANK_ACC_TBL_VO1
     */
    public ViewObjectImpl getBTVL_WKF_PARTNER_BANK_ACC_TBL_VO1() {
        return (ViewObjectImpl) findViewObject("BTVL_WKF_PARTNER_BANK_ACC_TBL_VO1");
    }

    /**
     * Container's getter for BTVL_WKF_PARTNER_SITE_TBL_VO2.
     * @return BTVL_WKF_PARTNER_SITE_TBL_VO2
     */
    public ViewObjectImpl getBTVL_WKF_PARTNER_SITE_TBL_VO2() {
        return (ViewObjectImpl) findViewObject("BTVL_WKF_PARTNER_SITE_TBL_VO2");
    }

    /**
     * Container's getter for BtvlWkfPartnerSiteTblFk1Link.
     * @return BtvlWkfPartnerSiteTblFk1Link
     */
    public ViewLinkImpl getBtvlWkfPartnerSiteTblFk1Link() {
        return (ViewLinkImpl) findViewLink("BtvlWkfPartnerSiteTblFk1Link");
    }
}
